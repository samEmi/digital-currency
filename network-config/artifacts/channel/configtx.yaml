# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
################################################################################
#
#   ORGANIZATIONS
#
#   This section defines the organizational identities that can be referenced
#   in the configuration profiles.
#
################################################################################
Organizations:
    - &Orderer
        # Name is the key by which this org will be referenced in channel
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        Name: Orderer

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        ID: OrdererMSP

        # MSPDir is the filesystem path which contains the MSP configuration.
        # replace to MSP location after generating crypto dirs
        MSPDir: crypto-config/ordererOrganizations/example.com/msp
        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: &MSBPolicies
            Readers:
                Type: Signature
                Rule: "OR('OrdererMSP.member')"
            Writers:
                Type: Signature
                Rule: "OR('OrdererMSP.member')"
            Admins:
                Type: Signature
                Rule: "OR('OrdererMSP.admin')"


    # SampleOrg defines an MSP using the sampleconfig. It should never be used
    # in production but may be used as a template for other definitions.
    - &MSB1
        # Name is the key by which this org will be referenced in channel
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        Name: MSB1

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        ID: MSB1

        # MSPDir is the filesystem path which contains the MSP configuration.
        # replace to MSP location after generating crypto dirs
        MSPDir: crypto-config/peerOrganizations/msb1.example.com/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: &MSBPolicies
            Readers:
                Type: Signature
                Rule: "OR('MSB1.member')"
            Writers:
                Type: Signature
                Rule: "OR('MSB1.member')"
            Admins:
                Type: Signature
                Rule: "OR('MSB1.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('MSB1.member')"

        # # OrdererEndpoints is a list of all orderers this org runs which clients
        # # and peers may to connect to to push transactions and receive blocks respectively.
        # OrdererEndpoints:
        #     - "127.0.0.1:7050"

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.msb1.example.com
              Port: 7051
    - &MSB2
        # Name is the key by which this org will be referenced in channel
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        Name: MSB2

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        ID: MSB2

        # MSPDir is the filesystem path which contains the MSP configuration.
        # replace to MSP location after generating crypto dirs
        MSPDir: crypto-config/peerOrganizations/msb2.example.com/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: &MSBPolicies
            Readers:
                Type: Signature
                Rule: "OR('MSB2.member')"
            Writers:
                Type: Signature
                Rule: "OR('MSB2.member')"
            Admins:
                Type: Signature
                Rule: "OR('MSB2.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('MSB2.member')"

        # # OrdererEndpoints is a list of all orderers this org runs which clients
        # # and peers may to connect to to push transactions and receive blocks respectively.
        # OrdererEndpoints:
        #     - "127.0.0.1:7050"

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.msb2.example.com
              Port: 9051


    - &MSB3
        # Name is the key by which this org will be referenced in channel
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        Name: MSB3

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        ID: MSB3

        # MSPDir is the filesystem path which contains the MSP configuration.
        MSPDir: crypto-config/peerOrganizations/msb3.example.com/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: &MSBPolicies
            Readers:
                Type: Signature
                Rule: "OR('MSB3.member')"
            Writers:
                Type: Signature
                Rule: "OR('MSB3.member')"
            Admins:
                Type: Signature
                Rule: "OR('MSB3.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('MSB3.member')"

        # # OrdererEndpoints is a list of all orderers this org runs which clients
        # # and peers may to connect to to push transactions and receive blocks respectively.
        # OrdererEndpoints:
        #     - "127.0.0.1:7050"

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.msb3.example.com
              Port: 11051
    # - &MSB4
    #     # Name is the key by which this org will be referenced in channel
    #     # configuration transactions.
    #     # Name can include alphanumeric characters as well as dots and dashes.
    #     Name: MSB4

    #     # ID is the key by which this org's MSP definition will be referenced.
    #     # ID can include alphanumeric characters as well as dots and dashes.
    #     ID: MSB4

    #     # MSPDir is the filesystem path which contains the MSP configuration.
    #     MSPDir: crypto-config/peerOrganizations/msb4.example.com/msp

    #     # Policies defines the set of policies at this level of the config tree
    #     # For organization policies, their canonical path is usually
    #     #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #     Policies: &MSBPolicies
    #         Readers:
    #             Type: Signature
    #             Rule: "OR('MSB4.member')"
    #         Writers:
    #             Type: Signature
    #             Rule: "OR('MSB4.member')"
    #         Admins:
    #             Type: Signature
    #             Rule: "OR('MSB4.admin')"
    #         Endorsement:
    #             Type: Signature
    #             Rule: "OR('MSB4.member')"

    #     # # OrdererEndpoints is a list of all orderers this org runs which clients
    #     # # and peers may to connect to to push transactions and receive blocks respectively.
    #     # OrdererEndpoints:
    #     #     - "127.0.0.1:7050"

    #     # AnchorPeers defines the location of peers which can be used for
    #     # cross-org gossip communication. Note, this value is only encoded in
    #     # the genesis block in the Application section context.
    #     AnchorPeers:
    #         - Host: peer0.msb4.example.com
    #           Port: 13051
    
    # - &MSB5
    #     # Name is the key by which this org will be referenced in channel
    #     # configuration transactions.
    #     # Name can include alphanumeric characters as well as dots and dashes.
    #     Name: MSB5

    #     # ID is the key by which this org's MSP definition will be referenced.
    #     # ID can include alphanumeric characters as well as dots and dashes.
    #     ID: MSB5

    #     # MSPDir is the filesystem path which contains the MSP configuration.
    #     MSPDir: crypto-config/peerOrganizations/msb5.example.com/msp

    #     # Policies defines the set of policies at this level of the config tree
    #     # For organization policies, their canonical path is usually
    #     #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #     Policies: &MSBPolicies
    #         Readers:
    #             Type: Signature
    #             Rule: "OR('MSB5.member')"
    #         Writers:
    #             Type: Signature
    #             Rule: "OR('MSB5.member')"
    #         Admins:
    #             Type: Signature
    #             Rule: "OR('MSB5.admin')"
    #         Endorsement:
    #             Type: Signature
    #             Rule: "OR('MSB5.member')"

    #     # # OrdererEndpoints is a list of all orderers this org runs which clients
    #     # # and peers may to connect to to push transactions and receive blocks respectively.
    #     # OrdererEndpoints:
    #     #     - "127.0.0.1:7050"

    #     # AnchorPeers defines the location of peers which can be used for
    #     # cross-org gossip communication. Note, this value is only encoded in
    #     # the genesis block in the Application section context.
    #     AnchorPeers:
    #         - Host: peer0.msb5.example.com
    #           Port: 15051

    # - &R1
    #     # Name is the key by which this org will be referenced in channel
    #     # configuration transactions.
    #     # Name can include alphanumeric characters as well as dots and dashes.
    #     Name: R1

    #     # ID is the key by which this org's MSP definition will be referenced.
    #     # ID can include alphanumeric characters as well as dots and dashes.
    #     ID: R1

    #     # MSPDir is the filesystem path which contains the MSP configuration.
    #     MSPDir: crypto-config/peerOrganizations/r1.example.com/msp

    #     # Policies defines the set of policies at this level of the config tree
    #     # For organization policies, their canonical path is usually
    #     #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #     Policies: &RegPolicies
    #         Readers:
    #             Type: Signature
    #             Rule: "OR('R1.member')"
    #         Writers:
    #             Type: Signature
    #             Rule: ""
    #         Admins:
    #             Type: Signature
    #             Rule: "OR('R1.admin')"
    #         # Endorsement:
    #         #     Type: Signature
    #         #     Rule: "OR('R1.member')"

    #     # # OrdererEndpoints is a list of all orderers this org runs which clients
    #     # # and peers may to connect to to push transactions and receive blocks respectively.
    #     # OrdererEndpoints:
    #     #     - "127.0.0.1:7050"

    #     # AnchorPeers defines the location of peers which can be used for
    #     # cross-org gossip communication. Note, this value is only encoded in
    #     # the genesis block in the Application section context.
    #     AnchorPeers:
    #         - Host: peer0.r1.example.com
    #           Port: 12051

    # - &R2
    #     # Name is the key by which this org will be referenced in channel
    #     # configuration transactions.
    #     # Name can include alphanumeric characters as well as dots and dashes.
    #     Name: R2

    #     # # SkipAsForeign can be set to true for org definitions which are to be
    #     # # inherited from the orderer system channel during channel creation.  This
    #     # # is especially useful when an admin of a single org without access to the
    #     # # MSP directories of the other orgs wishes to create a channel.  Note
    #     # # this property must always be set to false for orgs included in block
    #     # # creation.
    #     # SkipAsForeign: false

    #     # ID is the key by which this org's MSP definition will be referenced.
    #     # ID can include alphanumeric characters as well as dots and dashes.
    #     ID: R2

    #     # MSPDir is the filesystem path which contains the MSP configuration.
    #     MSPDir: crypto-config/peerOrganizations/r2.example.com/msp

    #     # Policies defines the set of policies at this level of the config tree
    #     # For organization policies, their canonical path is usually
    #     #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #     Policies: &RegPolicies
    #         Readers:
    #             Type: Signature
    #             Rule: "OR('R2.member')"
    #         Writers: # cannot write to the ledger
    #             Type: Signature
    #             Rule: ""
    #         Admins:
    #             Type: Signature
    #             Rule: "OR('R2.admin')"
    #         # Endorsement: # regulators should are not responsible for endorsing transactions
    #         #     Type: Signature
    #         #     Rule: "OR('SampleOrg.member')"

    #     # AnchorPeers defines the location of peers which can be used for
    #     # cross-org gossip communication. Note, this value is only encoded in
    #     # the genesis block in the Application section context.
    #     AnchorPeers:
    #         - Host: 127.0.0.1
    #           Port: 13051

    # - &C1
    #     # Name is the key by which this org will be referenced in channel
    #     # configuration transactions.
    #     # Name can include alphanumeric characters as well as dots and dashes.
    #     Name: C1

    #     # # SkipAsForeign can be set to true for org definitions which are to be
    #     # # inherited from the orderer system channel during channel creation.  This
    #     # # is especially useful when an admin of a single org without access to the
    #     # # MSP directories of the other orgs wishes to create a channel.  Note
    #     # # this property must always be set to false for orgs included in block
    #     # # creation.
    #     # SkipAsForeign: false

    #     # ID is the key by which this org's MSP definition will be referenced.
    #     # ID can include alphanumeric characters as well as dots and dashes.
    #     ID: C1

    #     # MSPDir is the filesystem path which contains the MSP configuration.
    #     # replace to MSP location after generating crypto dirs
    #     MSPDir: crypto-config/peerOrganizations/c1.example.com/msp

    #     # Policies defines the set of policies at this level of the config tree
    #     # For organization policies, their canonical path is usually
    #     #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #     Policies: &CPolicies
    #         Readers:
    #             Type: Signature
    #             Rule: "OR('C1.member')"
    #         Writers:
    #             Type: Signature
    #             Rule: ""
    #             # If your MSP is configured with the new NodeOUs, you might
    #             # want to use a more specific rule like the following:
    #             # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
    #         Admins:
    #             Type: Signature
    #             Rule: "OR('C1.admin')"
    #         # Endorsement:
    #         #     Type: Signature
    #         #     Rule: "OR('C1.member')"

    #     # # OrdererEndpoints is a list of all orderers this org runs which clients
    #     # # and peers may to connect to to push transactions and receive blocks respectively.
    #     # OrdererEndpoints:
    #     #     - "127.0.0.1:7050"

    #     # AnchorPeers defines the location of peers which can be used for
    #     # cross-org gossip communication. Note, this value is only encoded in
    #     # the genesis block in the Application section context.
    #     AnchorPeers:
    #         - Host: 127.0.0.1
    #           Port: 14051
    

    # - &C2
    #     # Name is the key by which this org will be referenced in channel
    #     # configuration transactions.
    #     # Name can include alphanumeric characters as well as dots and dashes.
    #     Name: C2

    #     # # SkipAsForeign can be set to true for org definitions which are to be
    #     # # inherited from the orderer system channel during channel creation.  This
    #     # # is especially useful when an admin of a single org without access to the
    #     # # MSP directories of the other orgs wishes to create a channel.  Note
    #     # # this property must always be set to false for orgs included in block
    #     # # creation.
    #     # SkipAsForeign: false

    #     # ID is the key by which this org's MSP definition will be referenced.
    #     # ID can include alphanumeric characters as well as dots and dashes.
    #     ID: C2

    #     # MSPDir is the filesystem path which contains the MSP configuration.
    #     MSPDir: crypto-config/peerOrganizations/c2.example.com/msp

    #     # Policies defines the set of policies at this level of the config tree
    #     # For organization policies, their canonical path is usually
    #     #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #     Policies: &CPolicies
    #         Readers:
    #             Type: Signature
    #             Rule: "OR('C2.member')"
    #         Writers: # cannot write to the ledger
    #             Type: Signature
    #             Rule: ""
    #         Admins:
    #             Type: Signature
    #             Rule: "OR('C2.admin')"
    #         # Endorsement: # regulators should are not responsible for endorsing transactions
    #         #     Type: Signature
    #         #     Rule: "OR('SampleOrg.member')"

    #     # AnchorPeers defines the location of peers which can be used for
    #     # cross-org gossip communication. Note, this value is only encoded in
    #     # the genesis block in the Application section context.
    #     AnchorPeers:
    #         - Host: 127.0.0.1
    #           Port: 15051

    # - &C3
    #     # Name is the key by which this org will be referenced in channel
    #     # configuration transactions.
    #     # Name can include alphanumeric characters as well as dots and dashes.
    #     Name: C3

    #     # # SkipAsForeign can be set to true for org definitions which are to be
    #     # # inherited from the orderer system channel during channel creation.  This
    #     # # is especially useful when an admin of a single org without access to the
    #     # # MSP directories of the other orgs wishes to create a channel.  Note
    #     # # this property must always be set to false for orgs included in block
    #     # # creation.
    #     # SkipAsForeign: false

    #     # ID is the key by which this org's MSP definition will be referenced.
    #     # ID can include alphanumeric characters as well as dots and dashes.
    #     ID: C3

    #     # MSPDir is the filesystem path which contains the MSP configuration.
    #     MSPDir: crypto-config/peerOrganizations/c3.example.com/msp

    #     # Policies defines the set of policies at this level of the config tree
    #     # For organization policies, their canonical path is usually
    #     #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    #     Policies: &CPolicies
    #         Readers:
    #             Type: Signature
    #             Rule: "OR('C3.member')"
    #         Admins:
    #             Type: Signature
    #             Rule: "OR('C3.admin')"

    #     # AnchorPeers defines the location of peers which can be used for
    #     # cross-org gossip communication. Note, this value is only encoded in
    #     # the genesis block in the Application section context.
    #     AnchorPeers:
    #         - Host: 127.0.0.1
    #           Port: 16051

################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.
    # Set the value of the capability to true to require it.
    Channel: &ChannelCapabilities
        # V2.0 for Channel is a catchall flag for behavior which has been
        # determined to be desired for all orderers and peers running at the v2.0.0
        # level, but which would be incompatible with orderers and peers from
        # prior releases.
        # Prior to enabling V2.0 channel capabilities, ensure that all
        # orderers and peers on a channel are at v2.0.0 or later.
        V2_0: true

    # Orderer capabilities apply only to the orderers, and may be safely
    # used with prior release peers.
    # Set the value of the capability to true to require it.
    Orderer: &OrdererCapabilities
        # V1.1 for Orderer is a catchall flag for behavior which has been
        # determined to be desired for all orderers running at the v1.1.x
        # level, but which would be incompatible with orderers from prior releases.
        # Prior to enabling V2.0 orderer capabilities, ensure that all
        # orderers on a channel are at v2.0.0 or later.
        V2_0: true

    # Application capabilities apply only to the peer network, and may be safely
    # used with prior release orderers.
    # Set the value of the capability to true to require it.
    Application: &ApplicationCapabilities
        # V2.0 for Application enables the new non-backwards compatible
        # features and fixes of fabric v2.0.
        # Prior to enabling V2.0 orderer capabilities, ensure that all
        # orderers on a channel are at v2.0.0 or later.
        V2_0: true

################################################################################
#
#   APPLICATION
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application-related parameters.
#
################################################################################
Application: &ApplicationDefaults
    ACLs: &ACLsDefault
        # This section provides defaults for policies for various resources
        # in the system. These "resources" could be functions on system chaincodes
        # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
        # (e.g.,who can receive Block events). This section does NOT specify the resource's
        # definition or API, but just the ACL policy for it.
        #
        # Users can override these defaults with their own policy mapping by defining the
        # mapping under ACLs in their channel definition

        #---New Lifecycle System Chaincode (_lifecycle) function to policy mapping for access control--#

        # ACL policy for _lifecycle's "CheckCommitReadiness" function
        _lifecycle/CheckCommitReadiness: /Channel/Application/Writers

        # ACL policy for _lifecycle's "CommitChaincodeDefinition" function
        _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

        # ACL policy for _lifecycle's "QueryChaincodeDefinition" function
        _lifecycle/QueryChaincodeDefinition: /Channel/Application/Writers

        # ACL policy for _lifecycle's "QueryChaincodeDefinitions" function
        _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Writers

        #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

        # ACL policy for lscc's "getid" function
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL policy for lscc's "getdepspec" function
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL policy for lscc's "getccdata" function
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL Policy for lscc's "getchaincodes" function
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

        #---Query System Chaincode (qscc) function to policy mapping for access control---#

        # ACL policy for qscc's "GetChainInfo" function
        qscc/GetChainInfo: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByNumber" function
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL policy for qscc's  "GetBlockByHash" function
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL policy for qscc's "GetTransactionByID" function
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByTxID" function
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

        # ACL policy for cscc's "GetConfigBlock" function
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL policy for cscc's "GetChannelConfig" function
        cscc/GetChannelConfig: /Channel/Application/Readers

        #---Miscellaneous peer function to policy mapping for access control---#

        # ACL policy for invoking chaincodes on peer
        peer/Propose: /Channel/Application/Writers

        # ACL policy for chaincode to chaincode invocation
        peer/ChaincodeToChaincode: /Channel/Application/Writers

        #---Events resource to policy mapping for access control###---#

        # ACL policy for sending block events
        event/Block: /Channel/Application/Readers

        # ACL policy for sending filtered block events
        event/FilteredBlock: /Channel/Application/Readers
  
    # Organizations lists the orgs participating on the application side of the
    # network.
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities describes the application level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ApplicationCapabilities

################################################################################
#
#   ORDERER
#
#   This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters.
#
################################################################################
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start
    OrdererType: etcdraft

    EtcdRaft:
        Consenters:
        - Host: orderer1.example.com
          Port: 7050
          ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
          ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt

    Addresses:
        - orderer1.example.com:7050

    # Batch Timeout: The amount of time to wait before creating a batch
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a batch
        MaxMessageCount: 10

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch.
        AbsoluteMaxBytes: 99 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed for
        # the serialized messages in a batch. A message larger than the preferred
        # max bytes will result in a batch larger than preferred max bytes.
        PreferredMaxBytes: 512 KB

    # Organizations is the list of orgs which are defined as participants on
    # the orderer side of the network
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"


    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ChannelCapabilities

################################################################################
#
#   PROFILES
#
#   Different configuration profiles may be encoded here to be specified as
#   parameters to the configtxgen tool. The profiles which specify consortiums
#   are to be used for generating the orderer genesis block. With the correct
#   consortium members defined in the orderer genesis block, channel creation
#   requests may be generated with only the org member names and a consortium
#   name.
#
################################################################################
Profiles:

    BasicChannel:
        Consortium: SampleConsortium
        <<: *ChannelDefaults
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *MSB1
                - *MSB2
                - *MSB3
                # - *MSB4
                # - *MSB5
                # - *R1
                # - *R2
                # - *C1
                # - *C2
                # - *C3
            Capabilities:
                <<: *ApplicationCapabilities

    OrdererGenesis:
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            EtcdRaft:
                Consenters:
                - Host: orderer1.example.com
                  Port: 7050
                  ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
                  ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
                - Host: orderer2.example.com
                  Port: 8050
                  ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
                  ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
                - Host: orderer3.example.com
                  Port: 9050
                  ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
                  ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
                # - Host: orderer4.example.com
                #   Port: 10050
                #   ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt
                #   ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt
                # - Host: orderer5.example.com
                #   Port: 11050
                #   ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt
                #   ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt
            Addresses:
                - orderer.example.com:7050
                - orderer2.example.com:8050
                - orderer3.example.com:9050
                # - orderer4.example.com:10050
                # - orderer5.example.com:11050

            Organizations:
            - *Orderer
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            SampleConsortium:
                Organizations:
                - *MSB1
                - *MSB2
                - *MSB3
                # - *MSB4
                # - *MSB5
                # - *R1
                # - *R2
                # - *C1
                # - *C2
                # - *C3